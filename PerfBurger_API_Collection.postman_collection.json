{
  "info": {
    "name": "PerfBurger AI Chatbot API",
    "description": "Complete API collection for testing the PerfBurger AI chatbot endpoints including authentication, chat, and order management.\n\n## Available Endpoints:\n\n### Core Application Endpoints:\n- **GET /health** - Application health check\n- **POST /users/register** - User registration\n- **POST /users/login** - User authentication\n- **POST /chat/** - Chat with AI assistant (requires authentication)\n- **POST /orders/** - Create order from chat conversation (requires authentication)\n- **GET /orders/lookup/{order_id}** - Lookup order by ID (requires authentication)\n\n### Debug Endpoints:\n- **GET /debug/llm-status** - Check LLM configuration and connectivity\n- **GET /debug/environment** - Get environment and deployment information\n\n## Usage:\n1. First register a user or login to get an authentication token\n2. Use the token to authenticate chat and order requests\n3. Start a chat conversation to interact with the AI\n4. Create orders from chat sessions that mention menu items\n5. Use debug endpoints to troubleshoot configuration issues\n\n## Testing:\nThis collection includes comprehensive tests for all endpoints to validate functionality, error handling, and data integrity. Run the entire collection to test the complete API workflow.",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "exec": [
          "// Collection-level pre-request script",
          "// Set default timeout",
          "if (!pm.environment.get('timeout')) {",
          "    pm.environment.set('timeout', '30000');",
          "}",
          "",
          "// Ensure content type is set",
          "if (!pm.environment.get('contentType')) {",
          "    pm.environment.set('contentType', 'application/json');",
          "}",
          "",
          "// Log current test being executed",
          "console.log('Executing: ' + pm.info.requestName);"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "exec": [
          "// Collection-level tests that run after every request",
          "",
          "// Test that response headers are present",
          "pm.test('Response has required headers', function () {",
          "    pm.response.to.have.header('Content-Type');",
          "});",
          "",
          "// Test response format is JSON (except for specific endpoints)",
          "if (pm.response.headers.get('Content-Type') && pm.response.headers.get('Content-Type').includes('application/json')) {",
          "    pm.test('Response is valid JSON', function () {",
          "        pm.response.to.be.json;",
          "    });",
          "}",
          "",
          "// Log response time for performance monitoring",
          "console.log('Response time: ' + pm.response.responseTime + 'ms');"
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:5000",
      "description": "Base URL for the PerfBurger API"
    },
    {
      "key": "accessToken",
      "value": "",
      "description": "JWT access token (auto-populated after login)"
    },
    {
      "key": "sessionId",
      "value": "",
      "description": "Chat session ID (auto-populated after first chat)"
    },
    {
      "key": "testOrderId",
      "value": "PB001234",
      "description": "Sample order ID for testing lookup functionality"
    },
    {
      "key": "testUserEmail",
      "value": "test@perfburger.com",
      "description": "Test user email for registration/login tests"
    },
    {
      "key": "testUserPassword",
      "value": "password123",
      "description": "Test user password"
    },
    {
      "key": "testUserFirstName",
      "value": "John",
      "description": "Test user first name"
    },
    {
      "key": "testUserLastName",
      "value": "Doe",
      "description": "Test user last name"
    }
  ],
  "item": [
    {
      "name": "Health Check",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "// Test that health check returns 200 OK",
              "pm.test('Health check returns 200', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "// Test response time is reasonable",
              "pm.test('Response time is less than 1000ms', function () {",
              "    pm.expect(pm.response.responseTime).to.be.below(1000);",
              "});",
              "",
              "// Test response body contains status",
              "pm.test('Response has status field', function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('status');",
              "    pm.expect(jsonData.status).to.eql('healthy');",
              "});",
              "",
              "// Test response is JSON",
              "pm.test('Response is JSON', function () {",
              "    pm.response.to.have.header('Content-Type', 'application/json');",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/health",
          "host": ["{{baseUrl}}"],
          "path": ["health"]
        },
        "description": "Check if the API is running and healthy"
      },
      "response": []
    },
    {
      "name": "Authentication",
      "item": [
        {
          "name": "Register User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test successful registration",
                  "pm.test('User registration successful', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "// Test response contains required fields",
                  "pm.test('Response contains user and access_token', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('user');",
                  "    pm.expect(response).to.have.property('access_token');",
                  "    pm.expect(response.user).to.have.property('email');",
                  "    pm.expect(response.user).to.have.property('first_name');",
                  "    pm.expect(response.user).to.have.property('last_name');",
                  "});",
                  "",
                  "// Save access token for subsequent requests",
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    if (response.access_token) {",
                  "        pm.collectionVariables.set('accessToken', response.access_token);",
                  "        pm.environment.set('accessToken', response.access_token);",
                  "        console.log('Access token saved:', response.access_token);",
                  "    }",
                  "}",
                  "",
                  "// Test user data matches request",
                  "pm.test('User data matches registration request', function () {",
                  "    const response = pm.response.json();",
                  "    const requestBody = JSON.parse(pm.request.body.raw);",
                  "    pm.expect(response.user.email).to.eql(requestBody.email);",
                  "    pm.expect(response.user.first_name).to.eql(requestBody.first_name);",
                  "    pm.expect(response.user.last_name).to.eql(requestBody.last_name);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"test@perfburger.com\",\n  \"password\": \"password123\",\n  \"first_name\": \"John\",\n  \"last_name\": \"Doe\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/users/register",
              "host": ["{{baseUrl}}"],
              "path": ["users", "register"]
            },
            "description": "Register a new user account"
          }
        },
        {
          "name": "Login User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test successful login",
                  "pm.test('User login successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "// Test response contains required fields",
                  "pm.test('Response contains user and access_token', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('user');",
                  "    pm.expect(response).to.have.property('access_token');",
                  "    pm.expect(response.user).to.have.property('email');",
                  "    pm.expect(response.user).to.have.property('first_name');",
                  "});",
                  "",
                  "// Test JWT token format",
                  "pm.test('Access token is JWT format', function () {",
                  "    const response = pm.response.json();",
                  "    const tokenParts = response.access_token.split('.');",
                  "    pm.expect(tokenParts).to.have.lengthOf(3);",
                  "});",
                  "",
                  "// Save access token for subsequent requests",
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    if (response.access_token) {",
                  "        pm.collectionVariables.set('accessToken', response.access_token);",
                  "        pm.environment.set('accessToken', response.access_token);",
                  "        console.log('Access token saved:', response.access_token);",
                  "    }",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"test@perfburger.com\",\n  \"password\": \"password123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/users/login",
              "host": ["{{baseUrl}}"],
              "path": ["users", "login"]
            },
            "description": "Login with existing user credentials"
          }
        }
      ]
    },
    {
      "name": "Chat",
      "item": [
        {
          "name": "Send Chat Message",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test successful chat response",
                  "pm.test('Chat message sent successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "// Test response contains required fields",
                  "pm.test('Response contains chat data', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('response');",
                  "    pm.expect(response).to.have.property('session_id');",
                  "    pm.expect(response).to.have.property('timestamp');",
                  "});",
                  "",
                  "// Test response is not empty",
                  "pm.test('Chat response is not empty', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.response).to.not.be.empty;",
                  "});",
                  "",
                  "// Save session ID for future requests",
                  "pm.test('Session ID is valid', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.session_id).to.not.be.empty;",
                  "    pm.environment.set('sessionId', response.session_id);",
                  "    pm.collectionVariables.set('sessionId', response.session_id);",
                  "});",
                  "",
                  "// Test response time is reasonable",
                  "pm.test('Response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"message\": \"Hello! Can you tell me about your menu?\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/chat/",
              "host": ["{{baseUrl}}"],
              "path": ["chat", ""]
            },
            "description": "Send a message to the AI chatbot"
          }
        },
        {
          "name": "Ask About Burgers",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test successful response to menu inquiry",
                  "pm.test('Menu inquiry responded successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "// Test response mentions menu items or vegetarian",
                  "pm.test('Response contains relevant menu information', function () {",
                  "    const response = pm.response.json();",
                  "    const responseText = response.message.toLowerCase();",
                  "    const hasMenuKeywords = responseText.includes('burger') || ",
                  "                           responseText.includes('vegetarian') || ",
                  "                           responseText.includes('menu') ||",
                  "                           responseText.includes('price');",
                  "    pm.expect(hasMenuKeywords).to.be.true;",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"message\": \"What vegetarian options do you have under $15?\",\n  \"session_id\": \"{{sessionId}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/chat/",
              "host": ["{{baseUrl}}"],
              "path": ["chat", ""]
            },
            "description": "Ask about specific menu items"
          }
        },
        {
          "name": "Ask About Delivery",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test successful delivery inquiry",
                  "pm.test('Delivery inquiry responded successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "// Test response mentions delivery information",
                  "pm.test('Response contains delivery information', function () {",
                  "    const response = pm.response.json();",
                  "    const responseText = response.message.toLowerCase();",
                  "    const hasDeliveryKeywords = responseText.includes('delivery') || ",
                  "                               responseText.includes('minutes') || ",
                  "                               responseText.includes('time') ||",
                  "                               responseText.includes('shipping');",
                  "    pm.expect(hasDeliveryKeywords).to.be.true;",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"message\": \"How long does delivery usually take?\",\n  \"session_id\": \"{{sessionId}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/chat/",
              "host": ["{{baseUrl}}"],
              "path": ["chat", ""]
            },
            "description": "Ask about delivery information"
          }
        }
      ]
    },
    {
      "name": "Orders",
      "item": [
        {
          "name": "Create Order from Chat",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test successful order creation",
                  "pm.test('Order created successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "// Test response contains order data",
                  "pm.test('Response contains order information', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('order');",
                  "    pm.expect(response.order).to.have.property('id');",
                  "    pm.expect(response.order).to.have.property('status');",
                  "    pm.expect(response.order).to.have.property('items');",
                  "    pm.expect(response.order).to.have.property('total_amount');",
                  "});",
                  "",
                  "// Save order ID for lookup tests",
                  "pm.test('Order ID is valid format', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.order.id).to.match(/^PB\\d{6}$/);",
                  "    pm.environment.set('testOrderId', response.order.id);",
                  "});",
                  "",
                  "// Test items array is not empty",
                  "pm.test('Order contains items', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.order.items).to.be.an('array');",
                  "    pm.expect(response.order.items.length).to.be.greaterThan(0);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"session_id\": \"{{sessionId}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/orders/",
              "host": ["{{baseUrl}}"],
              "path": ["orders", ""]
            },
            "description": "Create an order based on the chat conversation"
          }
        },
        {
          "name": "Lookup Order by ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test successful order lookup",
                  "pm.test('Order lookup successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "// Test response contains order data",
                  "pm.test('Response contains order information', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('order');",
                  "    pm.expect(response.order).to.have.property('id');",
                  "    pm.expect(response.order).to.have.property('status');",
                  "    pm.expect(response.order).to.have.property('items');",
                  "    pm.expect(response.order).to.have.property('total_amount');",
                  "});",
                  "",
                  "// Test order ID format",
                  "pm.test('Order ID has correct format', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.order.id).to.match(/^PB\\d{6}$/);",
                  "});",
                  "",
                  "// Test status description is present",
                  "pm.test('Order has status description', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.order).to.have.property('status_description');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/orders/lookup/{{testOrderId}}",
              "host": ["{{baseUrl}}"],
              "path": ["orders", "lookup", "{{testOrderId}}"]
            },
            "description": "Look up an order by its ID (format: PB######)"
          }
        }
      ]
    },
    {
      "name": "Debug",
      "item": [
        {
          "name": "LLM Status Check",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/debug/llm-status",
              "host": ["{{baseUrl}}"],
              "path": ["debug", "llm-status"]
            },
            "description": "Check the status of the LLM (Language Learning Model) configuration, including OpenAI API key status and test connectivity."
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has LLM status information', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('environment');",
                  "    pm.expect(responseJson).to.have.property('openai_config');",
                  "    pm.expect(responseJson).to.have.property('llm_test');",
                  "});",
                  "",
                  "pm.test('OpenAI configuration status is present', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.environment).to.have.property('OPENAI_API_KEY_set');",
                  "    pm.expect(responseJson.openai_config).to.have.property('config_api_key_set');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Environment Info",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/debug/environment",
              "host": ["{{baseUrl}}"],
              "path": ["debug", "environment"]
            },
            "description": "Get environment information for debugging deployment and configuration issues."
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has environment information', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('environment_variables');",
                  "    pm.expect(responseJson).to.have.property('system_info');",
                  "});",
                  "",
                  "pm.test('Environment variables status is present', function () {",
                  "    const responseJson = pm.response.json();",
                  "    const envVars = responseJson.environment_variables;",
                  "    pm.expect(envVars).to.have.property('OPENAI_API_KEY_status');",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Error Testing",
      "item": [
        {
          "name": "Unauthenticated Chat Request",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test that unauthorized request returns 401",
                  "pm.test('Unauthenticated request returns 401', function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "// Test error message is present",
                  "pm.test('Response contains error message', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('error');",
                  "    pm.expect(response.error).to.include('token');",
                  "});",
                  "",
                  "// Test no sensitive data is leaked",
                  "pm.test('No sensitive data in error response', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.not.have.property('access_token');",
                  "    pm.expect(response).to.not.have.property('user');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"message\": \"This should fail without authentication\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/chat",
              "host": ["{{baseUrl}}"],
              "path": ["chat"]
            },
            "description": "Test that chat endpoint requires authentication"
          }
        },
        {
          "name": "Invalid Login",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test that invalid login returns 401",
                  "pm.test('Invalid login returns 401', function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "// Test error message is appropriate",
                  "pm.test('Response contains appropriate error message', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('error');",
                  "    const errorMsg = response.error.toLowerCase();",
                  "    const hasAuthKeywords = errorMsg.includes('invalid') || ",
                  "                           errorMsg.includes('credentials') ||",
                  "                           errorMsg.includes('unauthorized');",
                  "    pm.expect(hasAuthKeywords).to.be.true;",
                  "});",
                  "",
                  "// Test no access token is provided",
                  "pm.test('No access token in invalid login response', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.not.have.property('access_token');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"nonexistent@example.com\",\n  \"password\": \"wrongpassword\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/users/login",
              "host": ["{{baseUrl}}"],
              "path": ["users", "login"]
            },
            "description": "Test login with invalid credentials"
          }
        },
        {
          "name": "Duplicate Registration",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test that duplicate registration returns 400 or 409",
                  "pm.test('Duplicate registration returns appropriate error code', function () {",
                  "    pm.expect([400, 409]).to.include(pm.response.code);",
                  "});",
                  "",
                  "// Test error message mentions duplicate/existing user",
                  "pm.test('Response indicates duplicate user', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('error');",
                  "    const errorMsg = response.error.toLowerCase();",
                  "    const hasDuplicateKeywords = errorMsg.includes('exists') || ",
                  "                                errorMsg.includes('duplicate') ||",
                  "                                errorMsg.includes('already') ||",
                  "                                errorMsg.includes('registered');",
                  "    pm.expect(hasDuplicateKeywords).to.be.true;",
                  "});",
                  "",
                  "// Test no access token is provided for failed registration",
                  "pm.test('No access token in failed registration', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.not.have.property('access_token');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{testUserEmail}}\",\n  \"password\": \"{{testUserPassword}}\",\n  \"first_name\": \"{{testUserFirstName}}\",\n  \"last_name\": \"{{testUserLastName}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/users/register",
              "host": ["{{baseUrl}}"],
              "path": ["users", "register"]
            },
            "description": "Test registration with already existing email"
          }
        }
      ]
    }
  ]
}
